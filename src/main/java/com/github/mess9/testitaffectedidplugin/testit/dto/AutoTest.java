/*
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.mess9.testitaffectedidplugin.testit.dto;

import com.google.gson.annotations.SerializedName;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * AutoTest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AutoTest {

	public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
	public static final String SERIALIZED_NAME_LINKS = "links";
	public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
	public static final String SERIALIZED_NAME_NAME = "name";
	public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
	public static final String SERIALIZED_NAME_CLASSNAME = "classname";
	public static final String SERIALIZED_NAME_STEPS = "steps";
	public static final String SERIALIZED_NAME_SETUP = "setup";
	public static final String SERIALIZED_NAME_TEARDOWN = "teardown";
	public static final String SERIALIZED_NAME_TITLE = "title";
	public static final String SERIALIZED_NAME_DESCRIPTION = "description";
	public static final String SERIALIZED_NAME_LABELS = "labels";
	public static final String SERIALIZED_NAME_IS_FLAKY = "isFlaky";
	public static final String SERIALIZED_NAME_EXTERNAL_KEY = "externalKey";
	public static final String SERIALIZED_NAME_GLOBAL_ID = "globalId";
	public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
	public static final String SERIALIZED_NAME_MUST_BE_APPROVED = "mustBeApproved";
	public static final String SERIALIZED_NAME_ID = "id";
	public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
	public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
	public static final String SERIALIZED_NAME_CREATED_BY_ID = "createdById";
	public static final String SERIALIZED_NAME_MODIFIED_BY_ID = "modifiedById";
	public static final String SERIALIZED_NAME_LAST_TEST_RUN_ID = "lastTestRunId";
	public static final String SERIALIZED_NAME_LAST_TEST_RUN_NAME = "lastTestRunName";
	public static final String SERIALIZED_NAME_LAST_TEST_RESULT_ID = "lastTestResultId";
	public static final String SERIALIZED_NAME_LAST_TEST_RESULT_CONFIGURATION = "lastTestResultConfiguration";
	public static final String SERIALIZED_NAME_LAST_TEST_RESULT_OUTCOME = "lastTestResultOutcome";
	public static final String SERIALIZED_NAME_STABILITY_PERCENTAGE = "stabilityPercentage";
	@SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
	private String externalId;
	@SerializedName(SERIALIZED_NAME_LINKS)
	private List<Link> links;
	@SerializedName(SERIALIZED_NAME_PROJECT_ID)
	private UUID projectId;
	@SerializedName(SERIALIZED_NAME_NAME)
	private String name;
	@SerializedName(SERIALIZED_NAME_NAMESPACE)
	private String namespace;
	@SerializedName(SERIALIZED_NAME_CLASSNAME)
	private String classname;
	@SerializedName(SERIALIZED_NAME_STEPS)
	private List<AutoTestStep> steps;
	@SerializedName(SERIALIZED_NAME_SETUP)
	private List<AutoTestStep> setup;
	@SerializedName(SERIALIZED_NAME_TEARDOWN)
	private List<AutoTestStep> teardown;
	@SerializedName(SERIALIZED_NAME_TITLE)
	private String title;
	@SerializedName(SERIALIZED_NAME_DESCRIPTION)
	private String description;
	@SerializedName(SERIALIZED_NAME_LABELS)
	private List<Label> labels;
	@SerializedName(SERIALIZED_NAME_IS_FLAKY)
	private Boolean isFlaky;
	@SerializedName(SERIALIZED_NAME_EXTERNAL_KEY)
	private String externalKey;
	@SerializedName(SERIALIZED_NAME_GLOBAL_ID)
	private Long globalId;
	@SerializedName(SERIALIZED_NAME_IS_DELETED)
	private Boolean isDeleted;
	@SerializedName(SERIALIZED_NAME_MUST_BE_APPROVED)
	private Boolean mustBeApproved;
	@SerializedName(SERIALIZED_NAME_ID)
	private UUID id;
	@SerializedName(SERIALIZED_NAME_CREATED_DATE)
	private OffsetDateTime createdDate;
	@SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
	private OffsetDateTime modifiedDate;
	@SerializedName(SERIALIZED_NAME_CREATED_BY_ID)
	private UUID createdById;
	@SerializedName(SERIALIZED_NAME_MODIFIED_BY_ID)
	private UUID modifiedById;
	@SerializedName(SERIALIZED_NAME_LAST_TEST_RUN_ID)
	private UUID lastTestRunId;
	@SerializedName(SERIALIZED_NAME_LAST_TEST_RUN_NAME)
	private String lastTestRunName;
	@SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT_ID)
	private UUID lastTestResultId;
	@SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT_CONFIGURATION)
	private AutoTestLastTestResultConfiguration lastTestResultConfiguration;
	@SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT_OUTCOME)
	private String lastTestResultOutcome;
	@SerializedName(SERIALIZED_NAME_STABILITY_PERCENTAGE)
	private Integer stabilityPercentage;

	public AutoTest() {
	}

	public AutoTest externalId(String externalId) {

		this.externalId = externalId;
		return this;
	}

	/**
	 * External ID of the autotest
	 *
	 * @return externalId
	 **/
	public String getExternalId() {
		return externalId;
	}


	public void setExternalId(String externalId) {
		this.externalId = externalId;
	}


	public AutoTest links(List<Link> links) {

		this.links = links;
		return this;
	}

	public AutoTest addLinksItem(Link linksItem) {
		if (this.links == null) {
			this.links = new ArrayList<>();
		}
		this.links.add(linksItem);
		return this;
	}

	/**
	 * Collection of the autotest links
	 *
	 * @return links
	 **/
	public List<Link> getLinks() {
		return links;
	}


	public void setLinks(List<Link> links) {
		this.links = links;
	}


	public AutoTest projectId(UUID projectId) {

		this.projectId = projectId;
		return this;
	}

	/**
	 * Unique ID of the autotest project
	 *
	 * @return projectId
	 **/
	public UUID getProjectId() {
		return projectId;
	}


	public void setProjectId(UUID projectId) {
		this.projectId = projectId;
	}


	public AutoTest name(String name) {

		this.name = name;
		return this;
	}

	/**
	 * Name of the autotest
	 *
	 * @return name
	 **/
	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public AutoTest namespace(String namespace) {

		this.namespace = namespace;
		return this;
	}

	/**
	 * Name of the autotest namespace
	 *
	 * @return namespace
	 **/
	public String getNamespace() {
		return namespace;
	}


	public void setNamespace(String namespace) {
		this.namespace = namespace;
	}


	public AutoTest classname(String classname) {

		this.classname = classname;
		return this;
	}

	/**
	 * Name of the autotest class
	 *
	 * @return classname
	 **/
	public String getClassname() {
		return classname;
	}


	public void setClassname(String classname) {
		this.classname = classname;
	}


	public AutoTest steps(List<AutoTestStep> steps) {

		this.steps = steps;
		return this;
	}

	public AutoTest addStepsItem(AutoTestStep stepsItem) {
		if (this.steps == null) {
			this.steps = new ArrayList<>();
		}
		this.steps.add(stepsItem);
		return this;
	}

	/**
	 * Collection of the autotest steps
	 *
	 * @return steps
	 **/
	public List<AutoTestStep> getSteps() {
		return steps;
	}


	public void setSteps(List<AutoTestStep> steps) {
		this.steps = steps;
	}


	public AutoTest setup(List<AutoTestStep> setup) {

		this.setup = setup;
		return this;
	}

	public AutoTest addSetupItem(AutoTestStep setupItem) {
		if (this.setup == null) {
			this.setup = new ArrayList<>();
		}
		this.setup.add(setupItem);
		return this;
	}

	/**
	 * Collection of the autotest setup steps
	 *
	 * @return setup
	 **/
	public List<AutoTestStep> getSetup() {
		return setup;
	}


	public void setSetup(List<AutoTestStep> setup) {
		this.setup = setup;
	}


	public AutoTest teardown(List<AutoTestStep> teardown) {

		this.teardown = teardown;
		return this;
	}

	public AutoTest addTeardownItem(AutoTestStep teardownItem) {
		if (this.teardown == null) {
			this.teardown = new ArrayList<>();
		}
		this.teardown.add(teardownItem);
		return this;
	}

	/**
	 * Collection of the autotest teardown steps
	 *
	 * @return teardown
	 **/
	public List<AutoTestStep> getTeardown() {
		return teardown;
	}


	public void setTeardown(List<AutoTestStep> teardown) {
		this.teardown = teardown;
	}


	public AutoTest title(String title) {

		this.title = title;
		return this;
	}

	/**
	 * Name of the autotest in autotest&#39;s card
	 *
	 * @return title
	 **/
	public String getTitle() {
		return title;
	}


	public void setTitle(String title) {
		this.title = title;
	}


	public AutoTest description(String description) {

		this.description = description;
		return this;
	}

	/**
	 * Description of the autotest in autotest&#39;s card
	 *
	 * @return description
	 **/
	public String getDescription() {
		return description;
	}


	public void setDescription(String description) {
		this.description = description;
	}


	public AutoTest labels(List<Label> labels) {

		this.labels = labels;
		return this;
	}

	public AutoTest addLabelsItem(Label labelsItem) {
		if (this.labels == null) {
			this.labels = new ArrayList<>();
		}
		this.labels.add(labelsItem);
		return this;
	}

	/**
	 * Collection of the autotest labels
	 *
	 * @return labels
	 **/
	public List<Label> getLabels() {
		return labels;
	}


	public void setLabels(List<Label> labels) {
		this.labels = labels;
	}


	public AutoTest isFlaky(Boolean isFlaky) {

		this.isFlaky = isFlaky;
		return this;
	}

	/**
	 * Indicates if the autotest is marked as flaky
	 *
	 * @return isFlaky
	 **/
	public Boolean getIsFlaky() {
		return isFlaky;
	}


	public void setIsFlaky(Boolean isFlaky) {
		this.isFlaky = isFlaky;
	}


	public AutoTest externalKey(String externalKey) {

		this.externalKey = externalKey;
		return this;
	}

	/**
	 * External key of the autotest
	 *
	 * @return externalKey
	 **/
	public String getExternalKey() {
		return externalKey;
	}


	public void setExternalKey(String externalKey) {
		this.externalKey = externalKey;
	}


	public AutoTest globalId(Long globalId) {

		this.globalId = globalId;
		return this;
	}

	/**
	 * Global ID of the autotest
	 *
	 * @return globalId
	 **/
	public Long getGlobalId() {
		return globalId;
	}


	public void setGlobalId(Long globalId) {
		this.globalId = globalId;
	}


	public AutoTest isDeleted(Boolean isDeleted) {

		this.isDeleted = isDeleted;
		return this;
	}

	/**
	 * Indicates if the autotest is deleted
	 *
	 * @return isDeleted
	 **/
	public Boolean getIsDeleted() {
		return isDeleted;
	}


	public void setIsDeleted(Boolean isDeleted) {
		this.isDeleted = isDeleted;
	}


	public AutoTest mustBeApproved(Boolean mustBeApproved) {

		this.mustBeApproved = mustBeApproved;
		return this;
	}

	/**
	 * Indicates if the autotest has unapproved changes from linked work items
	 *
	 * @return mustBeApproved
	 **/
	public Boolean getMustBeApproved() {
		return mustBeApproved;
	}


	public void setMustBeApproved(Boolean mustBeApproved) {
		this.mustBeApproved = mustBeApproved;
	}


	public AutoTest id(UUID id) {

		this.id = id;
		return this;
	}

	/**
	 * Unique ID of the autotest
	 *
	 * @return id
	 **/
	public UUID getId() {
		return id;
	}


	public void setId(UUID id) {
		this.id = id;
	}


	public AutoTest createdDate(OffsetDateTime createdDate) {

		this.createdDate = createdDate;
		return this;
	}

	/**
	 * Creation date of the autotest
	 *
	 * @return createdDate
	 **/
	public OffsetDateTime getCreatedDate() {
		return createdDate;
	}


	public void setCreatedDate(OffsetDateTime createdDate) {
		this.createdDate = createdDate;
	}


	public AutoTest modifiedDate(OffsetDateTime modifiedDate) {

		this.modifiedDate = modifiedDate;
		return this;
	}

	/**
	 * Last modification date of the project
	 *
	 * @return modifiedDate
	 **/
	public OffsetDateTime getModifiedDate() {
		return modifiedDate;
	}


	public void setModifiedDate(OffsetDateTime modifiedDate) {
		this.modifiedDate = modifiedDate;
	}


	public AutoTest createdById(UUID createdById) {

		this.createdById = createdById;
		return this;
	}

	/**
	 * Unique ID of the project creator
	 *
	 * @return createdById
	 **/
	public UUID getCreatedById() {
		return createdById;
	}


	public void setCreatedById(UUID createdById) {
		this.createdById = createdById;
	}


	public AutoTest modifiedById(UUID modifiedById) {

		this.modifiedById = modifiedById;
		return this;
	}

	/**
	 * Unique ID of the project last editor
	 *
	 * @return modifiedById
	 **/
	public UUID getModifiedById() {
		return modifiedById;
	}


	public void setModifiedById(UUID modifiedById) {
		this.modifiedById = modifiedById;
	}


	public AutoTest lastTestRunId(UUID lastTestRunId) {

		this.lastTestRunId = lastTestRunId;
		return this;
	}

	/**
	 * Unique ID of the autotest last test run
	 *
	 * @return lastTestRunId
	 **/
	public UUID getLastTestRunId() {
		return lastTestRunId;
	}


	public void setLastTestRunId(UUID lastTestRunId) {
		this.lastTestRunId = lastTestRunId;
	}


	public AutoTest lastTestRunName(String lastTestRunName) {

		this.lastTestRunName = lastTestRunName;
		return this;
	}

	/**
	 * Name of the autotest last test run
	 *
	 * @return lastTestRunName
	 **/
	public String getLastTestRunName() {
		return lastTestRunName;
	}


	public void setLastTestRunName(String lastTestRunName) {
		this.lastTestRunName = lastTestRunName;
	}


	public AutoTest lastTestResultId(UUID lastTestResultId) {

		this.lastTestResultId = lastTestResultId;
		return this;
	}

	/**
	 * Unique ID of the autotest last test result
	 *
	 * @return lastTestResultId
	 **/
	public UUID getLastTestResultId() {
		return lastTestResultId;
	}


	public void setLastTestResultId(UUID lastTestResultId) {
		this.lastTestResultId = lastTestResultId;
	}


	public AutoTest lastTestResultConfiguration(AutoTestLastTestResultConfiguration lastTestResultConfiguration) {

		this.lastTestResultConfiguration = lastTestResultConfiguration;
		return this;
	}

	/**
	 * Get lastTestResultConfiguration
	 *
	 * @return lastTestResultConfiguration
	 **/
	public AutoTestLastTestResultConfiguration getLastTestResultConfiguration() {
		return lastTestResultConfiguration;
	}


	public void setLastTestResultConfiguration(AutoTestLastTestResultConfiguration lastTestResultConfiguration) {
		this.lastTestResultConfiguration = lastTestResultConfiguration;
	}


	public AutoTest lastTestResultOutcome(String lastTestResultOutcome) {

		this.lastTestResultOutcome = lastTestResultOutcome;
		return this;
	}

	/**
	 * Outcome of the autotest last test result
	 *
	 * @return lastTestResultOutcome
	 **/
	public String getLastTestResultOutcome() {
		return lastTestResultOutcome;
	}


	public void setLastTestResultOutcome(String lastTestResultOutcome) {
		this.lastTestResultOutcome = lastTestResultOutcome;
	}


	public AutoTest stabilityPercentage(Integer stabilityPercentage) {

		this.stabilityPercentage = stabilityPercentage;
		return this;
	}

	/**
	 * Stability percentage of the autotest
	 *
	 * @return stabilityPercentage
	 **/
	public Integer getStabilityPercentage() {
		return stabilityPercentage;
	}


	public void setStabilityPercentage(Integer stabilityPercentage) {
		this.stabilityPercentage = stabilityPercentage;
	}


	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		AutoTest autoTest = (AutoTest) o;
		return Objects.equals(this.externalId, autoTest.externalId) &&
				Objects.equals(this.links, autoTest.links) &&
				Objects.equals(this.projectId, autoTest.projectId) &&
				Objects.equals(this.name, autoTest.name) &&
				Objects.equals(this.namespace, autoTest.namespace) &&
				Objects.equals(this.classname, autoTest.classname) &&
				Objects.equals(this.steps, autoTest.steps) &&
				Objects.equals(this.setup, autoTest.setup) &&
				Objects.equals(this.teardown, autoTest.teardown) &&
				Objects.equals(this.title, autoTest.title) &&
				Objects.equals(this.description, autoTest.description) &&
				Objects.equals(this.labels, autoTest.labels) &&
				Objects.equals(this.isFlaky, autoTest.isFlaky) &&
				Objects.equals(this.externalKey, autoTest.externalKey) &&
				Objects.equals(this.globalId, autoTest.globalId) &&
				Objects.equals(this.isDeleted, autoTest.isDeleted) &&
				Objects.equals(this.mustBeApproved, autoTest.mustBeApproved) &&
				Objects.equals(this.id, autoTest.id) &&
				Objects.equals(this.createdDate, autoTest.createdDate) &&
				Objects.equals(this.modifiedDate, autoTest.modifiedDate) &&
				Objects.equals(this.createdById, autoTest.createdById) &&
				Objects.equals(this.modifiedById, autoTest.modifiedById) &&
				Objects.equals(this.lastTestRunId, autoTest.lastTestRunId) &&
				Objects.equals(this.lastTestRunName, autoTest.lastTestRunName) &&
				Objects.equals(this.lastTestResultId, autoTest.lastTestResultId) &&
				Objects.equals(this.lastTestResultConfiguration, autoTest.lastTestResultConfiguration) &&
				Objects.equals(this.lastTestResultOutcome, autoTest.lastTestResultOutcome) &&
				Objects.equals(this.stabilityPercentage, autoTest.stabilityPercentage);
	}

	@Override
	public int hashCode() {
		return Objects.hash(externalId, links, projectId, name, namespace, classname, steps, setup, teardown, title, description, labels, isFlaky, externalKey, globalId, isDeleted, mustBeApproved, id, createdDate, modifiedDate, createdById, modifiedById, lastTestRunId, lastTestRunName, lastTestResultId, lastTestResultConfiguration, lastTestResultOutcome, stabilityPercentage);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class AutoTest {\n");
		sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
		sb.append("    links: ").append(toIndentedString(links)).append("\n");
		sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
		sb.append("    classname: ").append(toIndentedString(classname)).append("\n");
		sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
		sb.append("    setup: ").append(toIndentedString(setup)).append("\n");
		sb.append("    teardown: ").append(toIndentedString(teardown)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
		sb.append("    isFlaky: ").append(toIndentedString(isFlaky)).append("\n");
		sb.append("    externalKey: ").append(toIndentedString(externalKey)).append("\n");
		sb.append("    globalId: ").append(toIndentedString(globalId)).append("\n");
		sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
		sb.append("    mustBeApproved: ").append(toIndentedString(mustBeApproved)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
		sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
		sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
		sb.append("    modifiedById: ").append(toIndentedString(modifiedById)).append("\n");
		sb.append("    lastTestRunId: ").append(toIndentedString(lastTestRunId)).append("\n");
		sb.append("    lastTestRunName: ").append(toIndentedString(lastTestRunName)).append("\n");
		sb.append("    lastTestResultId: ").append(toIndentedString(lastTestResultId)).append("\n");
		sb.append("    lastTestResultConfiguration: ").append(toIndentedString(lastTestResultConfiguration)).append("\n");
		sb.append("    lastTestResultOutcome: ").append(toIndentedString(lastTestResultOutcome)).append("\n");
		sb.append("    stabilityPercentage: ").append(toIndentedString(stabilityPercentage)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}
}

